// Generated by CoffeeScript 1.6.3
(function() {
  var BSON, bchild, bson_file, bson_file_path, buffer, csv_file_path, exec, fs, jsoncsv, mongo,
    _this = this;

  require('coffee-script');

  exec = require('child_process').exec;

  fs = require('fs');

  mongo = require('mongodb');

  BSON = new mongo.BSON();

  jsoncsv = require('json2csv');

  if (process.argv[2] === '--bf') {
    bson_file_path = process.argv[3];
    csv_file_path = process.argv[5];
    buffer = null;
    this.jobj = [];
    bson_file = fs.readFileSync(bson_file_path);
    bchild = exec('bsondump ' + bson_file_path, function(err, stdout, stderr) {
      var fields, object;
      if (err) {
        console.log('Error: ' + err);
      }
      object = stdout;
      object = object.replace(/ObjectId\(/g, '');
      object = object.replace(/\ \)/g, '');
      object = object.replace(/Date\( /g, '');
      object = object.replace(/\}\n\{/g, '},{');
      object = object.replace(/\n/g, '');
      object = object.replace(/\'\{/g, '{');
      object = object.replace(/\}\'/g, '}');
      object = '[' + object + ']';
      _this.jobj = JSON.parse(object);
      fields = Object.keys(_this.jobj[0]);
      jsoncsv({
        data: _this.jobj,
        fields: fields
      }, function(err, csv) {
        if (err) {
          console.log(err);
        }
        return fs.writeFile(csv_file_path, csv, function(err) {
          if (err) {
            return console.log(err);
          }
        });
      });
      if (process.argv[6] === '--log') {
        if (process.argv[7] === 'true') {
          return console.log(_this.jobj);
        }
      }
    });
  } else {
    console.log('Error: You must define -bf (the bson file path)');
  }

}).call(this);
